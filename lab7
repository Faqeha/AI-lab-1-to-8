from queue import PriorityQueue

class Graph:
    def __init__(self):
        self.nodes = set()
        self.edges = {}
        self.heuristic = {}

    def add_node(self, value):
        self.nodes.add(value)
        self.edges[value] = []

    def add_edge(self, from_node, to_node, cost):
        self.edges[from_node].append((to_node, cost))
        self.edges[to_node].append((from_node, cost))  

    def set_heuristic(self, node, value):
        self.heuristic[node] = value

    def a_star(self, start, goal):
        open_list = PriorityQueue()  
        open_list.put((0, start))  
        
        g_costs = {node: float('inf') for node in self.nodes}  
        g_costs[start] = 0
        
        came_from = {}  
        
        while not open_list.empty():
            _, current = open_list.get()

            if current == goal:  
                path = []
                while current in came_from:
                    path.append(current)
                    current = came_from[current]
                path.append(start)
                path.reverse()
                return path
            
            for neighbor, cost in self.edges[current]:
                temp_g = g_costs[current] + cost
                
                if temp_g < g_costs[neighbor]:  
                    g_costs[neighbor] = temp_g
                    f_cost = temp_g + self.heuristic.get(neighbor, 0)
                    open_list.put((f_cost, neighbor))
                    came_from[neighbor] = current

        return None  

graph = Graph()
nodes = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
for node in nodes:
    graph.add_node(node)

edges = [
    ('A', 'B', 4), ('A', 'C', 3), 
    ('B', 'D', 5), ('C', 'D', 2), 
    ('C', 'E', 6), ('D', 'F', 4), 
    ('E', 'F', 1), ('F', 'G', 3)
]
for edge in edges:
    graph.add_edge(*edge)


heuristics = {'A': 7, 'B': 6, 'C': 2, 'D': 1, 'E': 2, 'F': 1, 'G': 0}
for node, h in heuristics.items():
    graph.set_heuristic(node, h)


start_node, goal_node = 'A', 'G'
path = graph.a_star(start_node, goal_node)
print(f"Shortest Path from {start_node} to {goal_node}: {path}")
