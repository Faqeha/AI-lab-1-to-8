# Task1:
def bfs_recursive(graph, current_level, visited):
    next_level = []  

    for node in current_level:
        if node not in visited:
            print(node, end=" ")
            visited.add(node)
            next_level.extend(graph[node])  

    if next_level:
        bfs_recursive(graph, next_level, visited)


graph = {
    "A": ["B", "C"],
    "B": ["D", "E"],
    "C": ["F"],
    "D": [],
    "E": ["F"],
    "F": []
}
print("BFS Traversal:")
bfs_recursive(graph, ["A"], set())

# Task2:

from collections import deque

class Node:
    def __init__(self, value):
        self.value = value
        self.neighbors = []

    def add_neighbor(self, node):
        self.neighbors.append(node)


def bfs_with_queue(start_node):
    queue = deque([start_node])
    visited = set()

    while queue:
        node = queue.popleft()
        
        if node not in visited:
            print(node.value, end=" ")
            visited.add(node)

            for neighbor in node.neighbors:
                if neighbor not in visited:
                    queue.append(neighbor)


A = Node("A")
B = Node("B")
C = Node("C")
D = Node("D")
E = Node("E")
F = Node("F")

A.add_neighbor(B)
A.add_neighbor(C)
B.add_neighbor(D)
B.add_neighbor(E)
C.add_neighbor(F)
E.add_neighbor(F)

print("BFS Traversal:")
bfs_with_queue(A)

