# Task1:
class Node:
    def __init__(self, value):
        self.value = value
        self.neighbors = []  

    def add_neighbor(self, node):
        self.neighbors.append(node)  

def dfs_with_stack(start_node):
    stack = [start_node]
    visited = set()  
    while stack:
        node = stack.pop()  
        
        if node not in visited:
            print(node.value, end=" ")
            visited.add(node)  

            for neighbor in reversed(node.neighbors):
                if neighbor not in visited:
                    stack.append(neighbor)

A = Node("A")
B = Node("B")
C = Node("C")
D = Node("D")
E = Node("E")

A.add_neighbor(B)
A.add_neighbor(C)
B.add_neighbor(D)
B.add_neighbor(E)
C.add_neighbor(E)

print("DFS Traversal:")
dfs_with_stack(A)

# Task2:

class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def inorder_traversal(root):
    if root:
        inorder_traversal(root.left)
        print(root.value, end=" ")
        inorder_traversal(root.right)

def preorder_traversal(root):
    if root:
        print(root.value, end=" ")
        preorder_traversal(root.left)
        preorder_traversal(root.right)

def postorder_traversal(root):
    if root:
        postorder_traversal(root.left)
        postorder_traversal(root.right)
        print(root.value, end=" ")

root = TreeNode("A")
root.left = TreeNode("B")
root.right = TreeNode("C")
root.left.left = TreeNode("D")
root.left.right = TreeNode("E")


print("Inorder Traversal:")
inorder_traversal(root)
print("\nPreorder Traversal:")
preorder_traversal(root)
print("\nPostorder Traversal:")
postorder_traversal(root)
